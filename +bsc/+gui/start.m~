function start()

persistent F;

if ( isempty(F) || ~isvalid(F) )
  F = figure();
end

conf = bsc.config.reconcile( bsc.config.load() );

N = 4;    %   n panels
W = 0.9;
Y = 0.05;
X = (1 - W) / 2;
L = (1 / N) - Y/2;

clf( F );

panels = struct();

% STIM_PARAMS
panels.stim_params = uipanel( F ...
  , 'Title', 'Stim Params' ...
  , 'Position', [ X, Y, W/2, L ] ...
);

stim_params_popup = shared_utils.gui.TextFieldDropdown();
stim_params_popup.non_editable = { 'protocol' };
stim_params_popup.on_change = @handle_stim_params_change;
stim_params_popup.parent = panels.stim_params;
stim_params_popup.set_data( conf.STIM_PARAMS );

% SCREEN
panels.screen = uipanel( F ...
  , 'Title', 'Screen' ...
  , 'Position', [ X+W/2, Y, W/2, L ] ...
);

screen_popup = shared_utils.gui.TextFieldDropdown();
screen_popup.on_change = @handle;
screen_popup.parent = panels.screen;
screen_popup.set_data( conf.STIM_PARAMS );

% TIME_IN
panels.time_in = uipanel( F ...
  , 'Title', 'Time in' ...
  , 'Position', [ X, Y+L, W, L ] ...
);

time_in_popup = shared_utils.gui.TextFieldDropdown();
time_in_popup.on_change = @handle_time_in_change;
time_in_popup.parent = panels.time_in;
time_in_popup.set_data( conf.TIME_IN );

% STRUCTURE
panels.structure = uipanel( F ...
  , 'Title', 'Structure' ...
  , 'Position', [ X, Y+L*2, W, L ] ...
);

% Run
panels.run = uipanel( F, 'Title', 'Run', 'Position', [X, Y+L*3, W, L] );

funcs = { 'start' };

w = .5;
l = 1 / numel(funcs);
x = 0;
y = 0;

for i = 1:numel(funcs)
  func_name = funcs{i};
  position = [ x, y, w, l ];
  uicontrol( panels.run ...
    , 'Style', 'pushbutton' ...
    , 'String', func_name ...
    , 'Units', 'normalized' ...
    , 'Position', position ...
    , 'Callback', @handle_button ...
  );
  y = y + l;
end

stim_params_popup = shared_utils.gui.TextFieldDropdown();
stim_params_popup.on_change = @handle_structure_change;
stim_params_popup.parent = panels.structure;
stim_params_popup.set_data( conf.STRUCTURE );

% stim param change
function new = handle_stim_params_change(old, new, property)
  if ( strcmp(property, 'protocol_name') )
    try
      new = bsc.serial.reconcile_stim_params( new );
    catch err
      warning( 'Failed to update protocol_name with message: \n%s', err.message );
      new = old;
    end
  elseif ( strcmp(property, 'active_rois') )
    try
      bsc.serial.util.check_active_roi_names( new.active_rois );
    catch err
      warning( 'Failed to update active roi name: \n%s', err.message );
      new = old;
    end
  end
  
  conf.STIM_PARAMS = new;
  bsc.config.save( conf );
end

% time in change
function new = handle_time_in_change(old, new, property)
  conf.TIME_IN = new;
  bsc.config.save( conf );
end

% structure change
function new = handle_structure_change(old, new, property)
  conf.STRUCTURE = new;
  bsc.config.save( conf );
end

% button press
function handle_button(source, event)
  
  func = source.String;
  
  switch ( func )
    case 'start'
      bsc.config.save( conf );
      bsc.task.start( conf );
    otherwise
      error( 'Unhandled function name: "%s".', func );
  end      
end

end